package common.exercise;

import java.util.*;

/**
 * 花牌算法题
 *
 * 现在给你一个整数数组 arr = [t1, t2, t3, t4....]

 数组的长度 len 可能为 2 或 5 或8等等  也就是说符合条件 (len + 1) % 3 = 0

 数组中的每一个元素t都是正整数, 并且数值范围在 [0 ~ 21] 中, 元素数值可能会重复

 现在有一组规则 RULES , 数组内符合任意规则的三个元素组合在一起可以被消除, 跟消消乐一样


 那么问题来了, 有没有一种组合方式能将数组arr内的元素全部消除呢?
 答案当然是不可能的! 因为数组arr的长度不能被 3整除 !!

 那么最终的问题来了!

 是否存在一个 额外的 t, 使得数组arr内的元素可以全部被消除?
 *
 * @Author yjy
 * @Date 2018-03-28 19:53
 */
public class HuAlgorithm {

    // 规则列表
    private static final int[][] RULES = {
            {0, 0, 0}, {1, 1, 1}, {2, 2, 2}, {3, 3, 3}, {4, 4, 4}, {5, 5, 5}, {6, 6, 6}, {7, 7, 7}, {8, 8, 8}, {9, 9, 9},
            {10, 10, 10}, {11, 11, 11}, {12, 12, 12}, {13, 13, 13}, {14, 14, 14}, {15, 15, 15}, {16, 16, 16}, {17, 17, 17},
            {18, 18, 18}, {19, 19, 19}, {20, 20, 20}, {21, 21, 21}, {0, 1, 2}, {3, 4, 5}, {6, 7, 8}, {9, 10, 11}, {12, 13, 14},
            {15, 16, 17}, {4, 8, 10}, {10, 18, 19}, {10, 19, 20}, {19, 20, 21}, {12, 20, 21}, {12, 15, 21}, {12, 15, 16}, {13, 15, 16}};

    public static void main(String[] args) {
        // 生成测试数据
//        generateArr(100, 5, 26);

        long startTime = System.currentTimeMillis();
        // 遍历测试数组集合
        for (int[] arr : arrArr) {
            // if 测试不通过
            if (!check(arr, true)) {
                // 抛出不通过的数组
                System.out.println("测试不通过 > arr : " + Arrays.toString(arr));
                return;
            }
        }
        System.out.println("测试通过 > 耗时: " + (System.currentTimeMillis() - startTime) + " ms" );
    }

    /**
     * 算法入口
     * @param arr 原数组
     * @param printGroup 答案存在的情况下打印组合列表
     * @return 是否存在...
     */
    private static boolean check(int[] arr, boolean printGroup) {
        // 统计数组中各个数值的个数
        int[] count = count(arr);
        List<int[]> res = keepRemove(count, arr.length, new LinkedList<>());
        if (res != null) {
            // if 打印组合
            if (printGroup) {
                StringBuilder builder = new StringBuilder("存在组合 > ");
                for (int[] r : res) {
                    builder.append(Arrays.toString(r)).append(", ");
                }
                System.out.println(builder.toString());
            }
            return true;
        }
        return false;
    }

    /**
     * 统计列表
     * 下标表示数字, 元素表示该数字出现的次数
     * @param arr 原数组
     * @return 统计数组
     */
    private static int[] count(int[] arr) {
        int[] count = new int[22];
        for (int x : arr) {
            count[x]++;
        }
        return count;
    }

    /**
     * 递归消除
     * @param count 当前数组统计
     * @param len 当前剩余元素个数
     * @param currentGroups 当前组合列表
     * @return 成功消除的组合列表 null表示无法消除
     */
    private static List<int[]> keepRemove(int[] count, int len, List<int[]> currentGroups) {
        // if 只剩两个元素
        if (len == 2) {
            // if 这两个元素处在同一个规则中
            if (checkInRule(count, currentGroups)) {
                // 返回整个数组组合列表
                return currentGroups;
            }
        }
        for (int[] rule : RULES) {
            // 尝试从当前数组中消除该规则
            if (tryRemove(count, rule)) {
                // 将被消除的组合加入集合
                currentGroups.add(rule);
                List<int[]> res = keepRemove(count, len - 3, currentGroups);
                if (res != null) {
                    return res;
                }
                // 此路不通, 数据恢复原样
                currentGroups.remove(rule);
                for (int x : rule) {
                    count[x]++;
                }
            }
        }
        // 无路可走
        return null;
    }

    /**
     * 验证剩余的两张牌是否处在某一个规则中
     * @param count 统计数组, 此时只有两个元素 = 1
     * @return 是否处在一个规则中
     */
    private static boolean checkInRule(int[] count, List<int[]> currentGroups) {
        for (int[] rule : RULES) {
            if (count[rule[0]] + count[rule[1]] + count[rule[2]] == 2) {
                currentGroups.add(rule);
                return true;
            }
        }
        return false;
    }

    /**
     * 尝试消除一个符合指定规则的组合
     * @param count 统计数组
     * @param rule 指定规则
     * @return 是否消除
     */
    private static boolean tryRemove(int[] count, int[] rule) {
        for (int i = 0; i < rule.length; i++) {
            if (count[rule[i]] > 0) {
                count[rule[i]] --;
            } else {
                while (i-- > 0) {
                    count[rule[i]]++;
                }
                return false;
            }
        }
        return true;
    }

    /**
     * 生成测试数据工具方法
     * @param arrCount 数组个数
     * @param minLen 数组的最小长度 需满足(minLen + 1) % 3 = 0
     * @param maxLen 数组的最大长度 需满足(maxLen + 1) % 3 = 0
     */
    private static void generateArr(int arrCount, int minLen, int maxLen) {
        List<int[]> arrList = new ArrayList<>(arrCount);
        for (int i = 0; i++ < arrCount;) {
            // 数组长度在 minLen ~ maxLen
            int[] generateArr = new int[(int)(Math.floor(Math.random() * ((maxLen - 5) / 3 + 1)) * 3) + minLen];
            for (int j = 0; j < generateArr.length ; j += 3) {
                // 随机挑一个规则塞进数组, 最后一个规则只需要赛两个元素集合
                int[] rule = RULES[(int)Math.floor(Math.random() * RULES.length)];
                generateArr[j] = rule[0];
                generateArr[j + 1] = rule[1];
                if (j + 2 < generateArr.length) {
                    generateArr[j + 2] = rule[2];
                }
            }
            // 排个序
            Arrays.sort(generateArr);
            // 放入集合
            arrList.add(generateArr);
        }
        arrList.sort(Comparator.comparingInt(a2 -> a2.length));
        System.out.println("private static final int[][] arrArr = {");
        arrList.forEach(a -> System.out.println((Arrays.toString(a).replace("[", "{").replace("]", "}, "))));
        System.out.println("};");
    }


    // 测试数据
    private static final int[][] arrArr = {
            // 存在答案的数据
            {0, 0, 0, 18, 18},
            {4, 4, 4, 10, 19},
            {2, 2, 2, 17, 17},
            {15, 15, 19, 20, 21},
            {10, 10, 10, 15, 15},
            {7, 7, 7, 10, 10},
            {8, 8, 15, 15, 15},
            {19, 19, 19, 19, 19},
            {8, 8, 8, 12, 15},
            {10, 10, 10, 19, 20},
            {12, 12, 12, 13, 13},
            {4, 8, 10, 12, 12},
            {12, 15, 15, 15, 16},
            {5, 5, 15, 16, 17},
            {0, 0, 11, 11, 11},
            {15, 16, 19, 19, 19},
            {11, 11, 11, 12, 20},
            {12, 12, 15, 15, 16},
            {0, 1, 1, 1, 2, 12, 12, 12},
            {8, 8, 12, 12, 13, 14, 15, 16},
            {9, 9, 9, 9, 9, 10, 10, 11},
            {0, 1, 2, 2, 2, 19, 20, 21},
            {4, 4, 4, 6, 6, 12, 12, 12},
            {15, 16, 18, 18, 18, 19, 20, 21},
            {3, 3, 3, 6, 6, 6, 12, 12},
            {4, 4, 4, 5, 5, 5, 5, 5},
            {10, 10, 12, 13, 13, 13, 15, 21},
            {6, 6, 7, 7, 8, 18, 18, 18},
            {5, 5, 12, 12, 13, 14, 20, 21},
            {3, 4, 5, 13, 13, 13, 20, 20},
            {4, 4, 4, 5, 5, 12, 20, 21},
            {12, 13, 14, 15, 16, 17, 21, 21},
            {0, 0, 0, 12, 13, 13, 13, 20},
            {2, 2, 13, 13, 13, 13, 15, 16},
            {0, 0, 1, 1, 1, 13, 15, 16},
            {8, 8, 8, 13, 13, 19, 20, 21},
            {4, 4, 4, 10, 13, 15, 16, 18},
            {3, 3, 3, 3, 3, 3, 14, 14},
            {4, 4, 4, 12, 20, 21, 21, 21},
            {2, 2, 2, 5, 5, 5, 9, 10},
            {0, 0, 0, 4, 8, 8, 8, 8, 10, 13, 15},
            {6, 7, 10, 10, 10, 12, 15, 15, 15, 15, 16},
            {4, 5, 5, 8, 10, 15, 15, 16, 16, 17, 17},
            {2, 2, 2, 3, 3, 3, 5, 5, 5, 21, 21},
            {1, 1, 1, 10, 10, 12, 15, 19, 19, 19, 21},
            {0, 0, 0, 12, 12, 15, 19, 19, 19, 20, 21},
            {0, 0, 0, 3, 3, 3, 6, 7, 19, 19, 19},
            {0, 0, 0, 9, 10, 10, 10, 11, 12, 13, 14, 19, 19, 20},
            {0, 0, 2, 2, 2, 10, 10, 10, 12, 13, 14, 17, 17, 17},
            {0, 1, 4, 5, 5, 5, 8, 10, 13, 13, 13, 17, 17, 17},
            {0, 0, 0, 4, 6, 7, 8, 8, 10, 12, 15, 16, 19, 20},
            {3, 4, 5, 7, 7, 7, 10, 12, 12, 18, 18, 18, 18, 19},
            {4, 4, 4, 4, 8, 10, 12, 13, 13, 13, 15, 18, 18, 18},
            {3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 8, 9, 9, 9},
            {0, 1, 2, 8, 8, 8, 9, 10, 18, 18, 18, 20, 20, 20},
            {4, 4, 6, 7, 8, 10, 12, 15, 19, 19, 19, 19, 20, 21},
            {0, 0, 3, 4, 5, 10, 14, 14, 14, 18, 19, 19, 20, 21},
            {3, 3, 3, 7, 7, 7, 9, 10, 10, 10, 10, 18, 18, 18},
            {5, 5, 5, 12, 15, 16, 16, 16, 16, 16, 16, 16, 20, 20},
            {0, 0, 0, 9, 9, 9, 9, 9, 12, 17, 17, 17, 20, 21},
            {1, 1, 1, 4, 4, 4, 4, 8, 10, 10, 10, 15, 15, 15},
            {2, 2, 2, 4, 4, 4, 5, 5, 5, 12, 13, 15, 15, 16, 19, 20, 21},
            {2, 2, 2, 3, 3, 6, 6, 6, 8, 8, 8, 12, 17, 17, 17, 20, 21},
            {0, 1, 1, 1, 1, 2, 6, 7, 8, 13, 13, 18, 18, 18, 19, 19, 19},
            {7, 7, 9, 9, 9, 9, 9, 9, 12, 12, 14, 14, 14, 15, 20, 21, 21},
            {1, 1, 2, 2, 2, 4, 4, 4, 11, 11, 11, 15, 16, 17, 20, 20, 20},
            {0, 0, 0, 4, 8, 9, 9, 9, 9, 9, 10, 19, 20, 20, 20, 20, 21},
            {0, 1, 2, 5, 5, 5, 6, 6, 13, 15, 16, 17, 17, 17, 19, 20, 21},
            {3, 4, 9, 10, 11, 14, 14, 14, 15, 15, 15, 20, 20, 20, 21, 21, 21},
            {3, 3, 3, 9, 10, 11, 12, 14, 14, 14, 15, 16, 19, 19, 19, 20, 21},
            {6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9, 10, 11, 11, 11, 11, 15, 16, 17},
            {3, 4, 4, 4, 5, 5, 5, 5, 9, 9, 9, 11, 11, 11, 12, 14, 14, 14, 20, 21},
            {2, 2, 2, 9, 9, 9, 10, 10, 18, 18, 18, 18, 18, 19, 19, 20, 21, 21, 21, 21},
            {5, 5, 5, 6, 6, 6, 6, 6, 6, 11, 11, 11, 15, 16, 16, 16, 17, 17, 17, 17},
            {4, 4, 4, 5, 5, 5, 10, 10, 14, 14, 14, 19, 19, 19, 19, 19, 20, 21, 21, 21},
            {3, 3, 4, 4, 4, 5, 5, 8, 9, 9, 9, 10, 10, 12, 16, 16, 16, 19, 20, 21},
            {3, 4, 5, 6, 7, 10, 10, 10, 12, 12, 12, 18, 18, 18, 19, 20, 21, 21, 21, 21},
            {3, 4, 5, 5, 5, 5, 7, 7, 7, 9, 10, 10, 10, 10, 11, 21, 21, 21, 21, 21},
            {0, 1, 2, 3, 3, 3, 4, 4, 4, 12, 15, 15, 15, 15, 16, 20, 20, 20, 20, 20},
            {3, 3, 3, 4, 4, 4, 8, 8, 8, 9, 10, 10, 10, 11, 12, 12, 12, 12, 15, 16},
            {4, 4, 4, 7, 7, 8, 8, 8, 9, 10, 10, 11, 12, 12, 12, 12, 12, 15, 16, 18, 19, 20, 21},
            {2, 2, 2, 5, 5, 5, 12, 12, 15, 15, 15, 15, 15, 15, 16, 16, 16, 17, 17, 17, 21, 21, 21},
            {1, 1, 1, 1, 1, 1, 10, 10, 10, 12, 13, 13, 13, 15, 16, 16, 16, 16, 19, 19, 20, 20, 21},
            {0, 0, 0, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 8, 9, 9, 9, 10, 11, 11, 16, 16, 16},
            {1, 1, 1, 3, 3, 3, 6, 7, 8, 8, 8, 8, 11, 11, 11, 12, 13, 13, 15, 16, 17, 17, 17},
            {2, 2, 4, 6, 6, 6, 7, 7, 7, 8, 10, 13, 13, 15, 15, 15, 16, 16, 16, 17, 19, 19, 19},
            {11, 11, 11, 11, 11, 12, 12, 13, 13, 13, 14, 14, 14, 15, 18, 18, 18, 20, 20, 20, 20, 21, 21},
            {4, 6, 6, 6, 8, 8, 8, 8, 9, 10, 10, 10, 10, 10, 11, 12, 12, 12, 15, 15, 15, 20, 21},
            {4, 4, 4, 6, 6, 6, 7, 8, 9, 10, 11, 11, 11, 11, 13, 13, 13, 13, 15, 16, 17, 17, 17},
            {0, 1, 2, 2, 2, 13, 15, 16, 18, 18, 18, 19, 19, 19, 20, 20, 20, 21, 21, 21, 21, 21, 21},
            {0, 0, 1, 1, 2, 4, 5, 5, 5, 8, 9, 9, 9, 10, 11, 11, 11, 13, 13, 13, 21, 21, 21},
            {0, 0, 0, 1, 2, 3, 3, 3, 6, 6, 6, 9, 9, 9, 10, 11, 11, 11, 12, 18, 19, 19, 19, 19, 20, 21},
            {4, 6, 6, 6, 6, 6, 6, 8, 9, 10, 10, 10, 11, 12, 12, 13, 13, 13, 15, 15, 16, 16, 16, 18, 19, 21},
            {3, 4, 4, 4, 4, 5, 7, 7, 7, 8, 8, 8, 8, 8, 8, 9, 9, 9, 11, 11, 12, 12, 12, 12, 20, 21},
            {2, 2, 2, 3, 3, 3, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 15, 17, 17, 19, 19, 19, 21},
            {3, 3, 4, 4, 4, 5, 5, 5, 6, 7, 7, 7, 7, 7, 7, 7, 8, 15, 15, 15, 16, 16, 16, 19, 20, 21},
            {1, 1, 1, 3, 4, 5, 6, 6, 6, 10, 12, 12, 12, 12, 13, 13, 13, 13, 14, 19, 20, 20, 21, 21, 21, 21},
            {0, 1, 2, 7, 7, 7, 9, 9, 9, 10, 10, 10, 12, 12, 12, 12, 12, 15, 15, 15, 15, 15, 16, 16, 19, 19},
            {1, 1, 1, 5, 5, 5, 5, 5, 5, 7, 7, 7, 9, 9, 9, 10, 15, 15, 16, 16, 17, 19, 19, 20, 20, 21},
            {2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 6, 7, 8, 10, 12, 12, 12, 16, 16, 19, 20, 21, 21, 21},

            // 不存在答案的数据
//            {10,11,12,14,15,16,17,18},
//            {0,0,1,1,2,2,3,4,5,6,6,6,7,8,18,19,19},
//            {0,1,2,4,4,4,8,8,8,10,10,11,11,16,16,17,18,18,19,19},
    };

    /**
     * 打印当时时间
     * @param name 前缀
     */
    private static void logTime(String name) {
        System.out.println(name + ":" + System.currentTimeMillis());
    }

}
